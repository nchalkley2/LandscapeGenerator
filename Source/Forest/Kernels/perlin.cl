#include "perlin.h"

// List of random numbers from 1-1024
__constant int hash[] = { 421, 256, 150, 623, 233,
390, 606, 252, 296, 14, 6, 626, 497, 84, 113, 485,
322, 753, 823, 197, 32, 249, 621, 658, 532, 351,
565, 297, 260, 4, 30, 645, 245, 230, 372, 369,
559, 674, 356, 590, 499, 333, 231, 551, 323, 69,
701, 465, 877, 106, 826, 471, 731, 516, 867, 394,
283, 389, 98, 649, 743, 181, 983, 950, 275, 493,
783, 870, 464, 759, 70, 692, 134, 205, 300, 745,
377, 306, 948, 378, 825, 980, 989, 854, 926, 65,
43, 702, 391, 506, 187, 569, 350, 681, 293, 935,
467, 806, 362, 109, 137, 375, 889, 905, 81, 864,
616, 557, 437, 830, 211, 919, 849, 642, 944, 520,
1018, 848, 663, 1014, 91, 735, 901, 123, 561,
1024, 525, 239, 958, 608, 767, 337, 927, 820, 92,
488, 408, 762, 840, 184, 447, 442, 913, 455, 462,
45, 335, 541, 188, 766, 440, 704, 454, 401, 360,
898, 466, 734, 871, 613, 732, 148, 190, 571, 498,
715, 842, 383, 636, 698, 88, 430, 617, 903, 436,
821, 120, 536, 895, 55, 270, 986, 141, 843, 355,
388, 209, 19, 382, 31, 1016, 412, 572, 563, 970,
594, 128, 896, 222, 215, 564, 524, 325, 943, 818,
40, 857, 196, 717, 365, 796, 554, 750, 585, 255,
902, 921, 266, 347, 221, 192, 650, 804, 151, 696,
312, 951, 444, 269, 171, 869, 108, 331, 257, 50,
887, 736, 213, 138, 240, 859, 971, 967, 1015, 505,
479, 835, 206, 74, 924, 341, 86, 587, 998, 534,
771, 707, 543, 194, 289, 189, 981, 295, 162, 111,
705, 8, 165, 723, 207, 85, 716, 994, 660, 226,
125, 518, 739, 392, 917, 920, 48, 746, 494, 742,
578, 812, 443, 284, 492, 321, 178, 553, 12, 995,
11, 882, 57, 418, 872, 881, 274, 1017, 984, 78,
813, 10, 403, 662, 929, 775, 883, 25, 513, 268,
212, 975, 631, 535, 897, 661, 907, 47, 72, 407,
83, 102, 301, 847, 521, 1019, 805, 678, 489, 589,
781, 550, 785, 648, 327, 273, 396, 66, 147, 987,
755, 486, 336, 393, 991, 682, 925, 789, 625, 744,
846, 760, 27, 780, 817, 1012, 500, 386, 837, 545,
933, 438, 343, 761, 38, 722, 757, 973, 183, 751,
934, 278, 380, 893, 258, 1003, 597, 204, 765, 280,
923, 803, 836, 318, 596, 615, 673, 20, 777, 918,
228, 737, 891, 584, 271, 653, 501, 159, 42, 173,
198, 441, 110, 395, 119, 374, 461, 575, 629, 328,
978, 965, 432, 376, 476, 174, 799, 959, 956, 770,
638, 1008, 99, 801, 909, 528, 549, 155, 671, 977,
676, 93, 305, 791, 769, 387, 773, 453, 202, 193,
237, 195, 287, 768, 290, 364, 468, 637, 655, 574,
1006, 402, 683, 398, 834, 315, 247, 29, 459, 807,
368, 885, 964, 974, 352, 711, 186, 225, 326, 610,
798, 220, 481, 428, 82, 567, 940, 542, 411, 612,
531, 700, 747, 630, 304, 348, 680, 469, 892, 1011,
292, 163, 741, 900, 577, 242, 583, 129, 752, 945,
166, 167, 52, 1009, 558, 511, 307, 922, 227, 709,
175, 899, 381, 17, 635, 969, 539, 46, 425, 308,
100, 400, 79, 104, 721, 482, 657, 426, 878, 941,
299, 182, 966, 309, 457, 136, 417, 618, 361, 191,
435, 229, 719, 251, 997, 152, 720, 265, 876, 640,
666, 952, 687, 75, 576, 39, 345, 527, 311, 248,
217, 131, 874, 439, 474, 330, 960, 140, 223, 868,
600, 179, 24, 1020, 614, 508, 546, 936, 932, 686,
316, 358, 839, 478, 547, 291, 797, 264, 54, 371,
540, 450, 59, 962, 963, 526, 748, 115, 448, 413,
776, 445, 491, 160, 37, 142, 529, 353, 177, 910,
677, 22, 530, 794, 56, 5, 764, 95, 639, 733, 112,
414, 930, 627, 738, 808, 815, 272, 582, 73, 473,
728, 379, 679, 64, 931, 157, 139, 853, 879, 782,
176, 656, 399, 957, 844, 829, 598, 942, 133, 862,
763, 961, 63, 16, 644, 519, 697, 145, 118, 560,
460, 26, 866, 641, 146, 243, 185, 999, 170, 340,
514, 71, 996, 18, 261, 103, 487, 1004, 990, 595,
607, 591, 124, 778, 3, 790, 276, 939, 405, 972,
169, 749, 67, 51, 406, 424, 279, 472, 703, 1021,
659, 338, 132, 800, 795, 509, 267, 609, 101, 873,
404, 788, 53, 579, 21, 419, 718, 422, 477, 729,
238, 938, 105, 458, 200, 665, 153, 915, 451, 809,
517, 135, 602, 946, 976, 126, 329, 60, 475, 339,
246, 949, 363, 831, 332, 668, 397, 928, 429, 149,
968, 410, 832, 556, 856, 33, 288, 894, 2, 664, 80,
634, 772, 714, 409, 117, 654, 538, 427, 906, 366,
263, 620, 122, 955, 199, 235, 523, 593, 285, 35,
833, 724, 570, 828, 581, 470, 294, 23, 841, 712,
756, 568, 694, 580, 586, 774, 431, 811, 324, 699,
860, 234, 253, 672, 669, 852, 90, 793, 691, 313,
861, 988, 158, 420, 592, 537, 480, 875, 858, 725,
979, 1005, 244, 320, 779, 434, 349, 512, 423, 504,
688, 496, 224, 573, 758, 603, 816, 214, 68, 510,
168, 754, 7, 281, 838, 62, 1000, 456, 792, 947,
890, 850, 298, 1007, 533, 675, 865, 97, 824, 172,
985, 632, 310, 914, 619, 433, 370, 819, 562, 144,
1002, 130, 810, 9, 670, 164, 36, 286, 127, 827,
954, 855, 1, 713, 495, 652, 1013, 58, 1023, 507,
154, 303, 708, 726, 94, 484, 282, 216, 87, 96,
354, 912, 143, 566, 259, 911, 727, 446, 684, 218,
385, 784, 1001, 643, 937, 1010, 667, 107, 161,
232, 633, 880, 740, 49, 359, 114, 236, 689, 452,
156, 254, 317, 695, 208, 415, 548, 449, 367, 61,
180, 544, 302, 277, 588, 44, 611, 314, 605, 863,
690, 884, 262, 373, 28, 814, 601, 503, 710, 555,
346, 219, 384, 706, 250, 319, 522, 647, 982, 599,
993, 822, 646, 77, 624, 34, 888, 886, 604, 685,
845, 121, 552, 357, 483, 628, 851, 992, 730, 116,
651, 515, 342, 89, 416, 693, 1022, 490, 904, 15,
13, 908, 241, 210, 201, 786, 953, 334,344,916,
787, 622, 76, 203, 502, 463, 802, 41 };

__constant unsigned int hashsize = (sizeof(hash) / sizeof(int));

// turn this into a normalized float
float noise2(int x, int y, int seed)
{
	int tmp = hash[(y + seed) % hashsize];
	return ((float)(hash[(tmp + x) % hashsize])/(float) hashsize);
}

float lin_inter(float x, float y, float s)
{
	return x + s * (y - x);
}

float smooth_inter(float x, float y, float s)
{
	return lin_inter(x, y, s * s * (3 - 2 * s));
}

float noise2d(float x, float y, int seed)
{
	int x_int = x;
	int y_int = y;
	float x_frac = x - x_int;
	float y_frac = y - y_int;
	float s = noise2(x_int, y_int, seed);
	float t = noise2(x_int + 1, y_int, seed);
	float u = noise2(x_int, y_int + 1, seed);
	float v = noise2(x_int + 1, y_int + 1, seed);
	float low = smooth_inter(s, t, x_frac);
	float high = smooth_inter(u, v, x_frac);
	return smooth_inter(low, high, y_frac);
}

float perlin2d(float x, float y, float freq, int depth, int seed)
{
	float xa = x*freq;
	float ya = y*freq;
	float amp = 1.0;
	float fin = 0.0;
	float div = 0.0;

	int i;
	for (i = 0; i < depth; i++)
	{
		div += 1.0 * amp;
		fin += noise2d(xa, ya, seed) * amp;
		amp /= 2;
		xa *= 2;
		ya *= 2;
	}

	return fin / div;
}

__kernel void perlin(__read_only image2d_t heightIn,
	__write_only image2d_t heightOut,
	float size,
	int seed,
	int depth,
	float amplitude)
{
	int x = get_global_id(0);
	int y = get_global_id(1);

	uint out = (uint) (perlin2d((float)x, (float)y, 1.f / size, depth, seed) * amplitude);

	write_imageui(heightOut, (int2)(x, y), out);
}
